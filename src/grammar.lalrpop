use crate::shell::types::{Cmd, CmdPart, Arg, Redirect, CmdPartSection};

grammar;

match {
    ">" => REDIRECT_OUT,
    "<" => REDIRECT_IN,
    "|" => PIPE,
    r#""[^"]*""# => STRING,
    r#"[^\s|"$()]+"# => WORD,
}

pub Command: Cmd = {
    <p0:Part> <prest:(PIPE <Part>)*> => Cmd{
        parts: vec![p0].into_iter().chain(prest.into_iter()).collect(),
    }
}

Part: CmdPart = {
    <redirects: Redirect*> <cmd: WORD> <args: CmdPartSection*> => CmdPart {
        cmd: String::from(cmd),
        args: args.clone().into_iter().filter_map(|v| match v {
                          CmdPartSection::Redirect(_) => None,
                          CmdPartSection::Arg(arg) => Some(arg),
                      }).collect(),
        redirects: [redirects, args.into_iter().filter_map(|v| match v {
            CmdPartSection::Redirect(r) => Some(r),
            CmdPartSection::Arg(_) => None,
        }).collect()].concat(),
    }
}

CmdPartSection: CmdPartSection = {
    Arg => CmdPartSection::Arg(<>),
    Redirect => CmdPartSection::Redirect(<>),
}

Arg: Arg = {
    STRING => Arg::String(String::from(<>.strip_prefix('"').unwrap().strip_suffix('"').unwrap())),
    WORD => Arg::Word(String::from(<>)),
}

Redirect: Redirect = {
    REDIRECT_IN <f: WORD> => Redirect::In(String::from(f)),
    REDIRECT_OUT <f: WORD> => Redirect::Out(String::from(f))
}